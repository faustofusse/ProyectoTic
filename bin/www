#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('proyecto:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Set PeerJs server
 */

var ExpressPeerServer = require('peer').ExpressPeerServer;
var peerserver = ExpressPeerServer(server, {debug: true});

app.use('/', peerserver);

peerserver.on('connection', function(id) {
  //console.log(id + ' connected.');
});

peerserver.on('disconnect', function(id) {
  //console.log(id + ' disconnected');
});

/**
 * Sockets.
 */

var io = require('socket.io')(server);
//var sockets = require('../sockets/sockets');

io.on('connection', function(socket){

  socket.on('disconnect', function(){
    console.log('User disconnected.');
  });

  socket.on('movimiento', function(data){ZX
    app.locals.movimiento = data;
  });

  socket.on('user_connection', function(data){
    console.log(data + ' connected.');
    socket.id = data;
    console.log(socket.id + ' socket id connected.');
    io.clients((error, clients) => {
      if (error) throw error;
      console.log(clients); // => [6em3d4TJP8Et9EMNAAAA, G5p55dHhGgUnLUctAAAB]
    });
  });

  //socket.emit('request', /* */); // emit an event to the socket
  //io.emit('broadcast', /* */); // emit an event to all connected sockets
  //socket.on('reply', function(){ /* */ }); // listen to the event
});

module.exports = io;

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Listening on port ' + addr.port + '....');
  //console.log('IP: '+ require('ip').address());
}


