#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('proyecto:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Set PeerJs server
 */
/*
var ExpressPeerServer = require('peer').ExpressPeerServer;
var peerserver = ExpressPeerServer(server, {debug: true, port: 8000});

app.use('/', peerserver);

peerserver.on('connection', function(id) {
  //console.log(id + ' connected.');
});

peerserver.on('disconnect', function(id) {
  //console.log(id + ' disconnected');
});
*/
/**
 * Sockets.
 */

var WebSocketServer = require('websocket').server;

var wsServer = new WebSocketServer({
  httpServer: server,
  autoAcceptConnections: false
});

wsServer.on('request', function (request) {
  console.log('request');
  var connection = request.accept('arduino', request.origin);
  console.log('Robot connected.');
  
  connection.on('message', function (message) {
    console.log('DATa ', message);
    if (message.type === 'utf8') {
      console.log('Received Message: ' + message.utf8Data)
    } else if (message.type === 'binary') {
      console.log('Received Binary Message of ' + message.binaryData.length + ' bytes');
    }
  });

  connection.on('close', function (reasonCode, description) {
    console.log('Robot disconnected. IP:' + connection.remoteAddress);
  });
  
});

wsServer.on('connect', function(connection){
  console.log('Connected');
});

wsServer.on('close', function(webSocketConnection, closeReason, description){
  console.log('closed');
  console.log(closeReason);
  console.log(description);
});


//var wsServer = require('../sockets/socket-server');

/*var io = require('socket.io')(server);
//var sockets = require('../sockets/sockets');

io.on('connection', function(socket){
  console.log('User connected.');
  socket.emit('light', true);

  socket.on('disconnect', function(){
    console.log('User disconnected.');
  });

  socket.on('movimiento', function(data){
    app.locals.movimiento = data;
  });

  //socket.emit('request', ); // emit an event to the socket
  //io.emit('broadcast', ); // emit an event to all connected sockets
  //socket.on('reply', function(){ }); // listen to the event
});
*/


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Listening on port ' + addr.port + '....');
  //console.log('IP: '+ require('ip').address());
}


